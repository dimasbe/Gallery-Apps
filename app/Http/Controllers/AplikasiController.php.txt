<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Kategori;
use App\Models\Aplikasi; 
use App\Models\FotoAplikasi;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Auth; 
class AplikasiController extends Controller
{
    public function index()
    {
        $aplikasis = Aplikasi::with('kategori', 'user')->latest()->paginate(10); 
        return view('tambah_aplikasi.index', compact('aplikasis'));
    }

    public function create()
    {
        $kategoris = Kategori::where('sub_kategori', 'aplikasi')->get();
        return view('tambah_aplikasi.create', compact('kategoris'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'nama_aplikasi' => 'required|string|max:255',
            'logo' => 'required|image|mimes:jpeg,png,jpg,gif|max:2048', 
            'jenis_kategori' => 'required|exists:kategori,id',
            'pemilik' => 'required|string|max:255',
            'tanggal_rilis' => 'required|date',
            'versi' => 'required|string|max:50',
            'rating_konten' => 'required|string|max:50',
            'tautan_aplikasi' => 'required|url',
            'deskripsi' => 'required|string',
            'fitur' => 'nullable|string',
            'foto_aplikasi.*' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048', 
        ]);

        $logoPath = $request->file('logo')->store('public/logos');

        $aplikasi = Aplikasi::create([
            'id_user' => Auth::id(),
            'nama_aplikasi' => $request->nama_aplikasi,
            'logo' => $logoPath,
            'id_kategori' => $request->jenis_kategori,
            'nama_pemilik' => $request->pemilik,
            'tanggal_rilis' => $request->tanggal_rilis,
            'versi' => $request->versi,
            'rating_konten' => $request->rating_konten,
            'tautan_aplikasi' => $request->tautan_aplikasi,
            'deskripsi' => $request->deskripsi,
            'fitur' => $request->fitur,
            'status_verifikasi' => 'pending', 
            'arsip' => false,
        ]);

        if ($request->hasFile('foto_aplikasi')) {
            foreach ($request->file('foto_aplikasi') as $foto) {
                $fotoPath = $foto->store('public/foto_aplikasi');
                FotoAplikasi::create([
                    'id_aplikasi' => $aplikasi->id,
                    'path_foto' => $fotoPath,
                ]);
            }
        }

        return redirect()->route('user_login.aplikasi.index')->with('success', 'Aplikasi berhasil ditambahkan!');
    }

    public function show(Aplikasi $aplikasi)
    {
        if (Auth::id() !== $aplikasi->id_user) {
            abort(403);
        }
        $aplikasi->load('kategori', 'user', 'fotoAplikasi'); 
        return view('tambah_aplikasi.show', compact('aplikasi'));
    }

    public function edit(Aplikasi $aplikasi)
    {
        if (Auth::id() !== $aplikasi->id_user) {
            abort(403);
        }
        $kategoris = Kategori::where('sub_kategori', 'aplikasi')->get();
        $aplikasi->load('fotoAplikasi'); 
        return view('tambah_aplikasi.edit', compact('aplikasi', 'kategoris'));
    }

    public function update(Request $request, Aplikasi $aplikasi)
    {
        if (Auth::id() !== $aplikasi->id_user) {
            abort(403);
        }

        $request->validate([
            'nama_aplikasi' => 'required|string|max:255',
            'logo' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'jenis_kategori' => 'required|exists:kategori,id',
            'pemilik' => 'required|string|max:255',
            'tanggal_rilis' => 'required|date',
            'versi' => 'required|string|max:50',
            'rating_konten' => 'required|string|max:50',
            'tautan_aplikasi' => 'required|url',
            'deskripsi' => 'required|string',
            'fitur' => 'nullable|string',
            'foto_aplikasi.*' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'existing_photos_to_delete' => 'nullable|array', 
            'existing_photos_to_delete.*' => 'exists:foto_aplikasi,id',
        ]);

        if ($request->hasFile('logo')) {
            if ($aplikasi->logo && Storage::exists($aplikasi->logo)) {
                Storage::delete($aplikasi->logo);
            }
            $logoPath = $request->file('logo')->store('public/logos');
        } else {
            $logoPath = $aplikasi->logo; 
        }

        // Update data Aplikasi
        $aplikasi->update([
            'nama_aplikasi' => $request->nama_aplikasi,
            'logo' => $logoPath,
            'id_kategori' => $request->jenis_kategori,
            'nama_pemilik' => $request->pemilik,
            'tanggal_rilis' => $request->tanggal_rilis,
            'tanggal_update' => now(), 
            'versi' => $request->versi,
            'rating_konten' => $request->rating_konten,
            'tautan_aplikasi' => $request->tautan_aplikasi,
            'deskripsi' => $request->deskripsi,
            'fitur' => $request->fitur,
        ]);

        if ($request->has('existing_photos_to_delete')) {
            foreach ($request->existing_photos_to_delete as $foto_id) {
                $foto = FotoAplikasi::find($foto_id);
                if ($foto && $foto->id_aplikasi === $aplikasi->id) { 
                    if (Storage::exists($foto->path_foto)) {
                        Storage::delete($foto->path_foto);
                    }
                    $foto->delete();
                }
            }
        }

        if ($request->hasFile('foto_aplikasi')) {
            foreach ($request->file('foto_aplikasi') as $foto) {
                $fotoPath = $foto->store('public/foto_aplikasi');
                FotoAplikasi::create([
                    'id_aplikasi' => $aplikasi->id,
                    'path_foto' => $fotoPath,
                ]);
            }
        }

        return redirect()->route('user_login.aplikasi.index')->with('success', 'Aplikasi berhasil diperbarui!');
    }

    public function destroy(Aplikasi $aplikasi)
    {
        if (Auth::id() !== $aplikasi->id_user) {
            abort(403);
        }

        if ($aplikasi->logo && Storage::exists($aplikasi->logo)) {
            Storage::delete($aplikasi->logo);
        }

        foreach ($aplikasi->fotoAplikasi as $foto) {
            if (Storage::exists($foto->path_foto)) {
                Storage::delete($foto->path_foto);
            }
            $foto->delete();
        }

        $aplikasi->delete();
        return redirect()->route('user_login.aplikasi.index')->with('success', 'Aplikasi berhasil dihapus!');
    }
}